name: 'Terraform AWS EC2 Deployment'

on:
  push:
    branches:
      - main
      - develop
    paths:
      - 'terraform/**'
      - '.github/workflows/terraform-deploy.yml'
  pull_request:
    branches:
      - main
    paths:
      - 'terraform/**'
  workflow_dispatch:
    inputs:
      action:
        description: 'Action to perform'
        required: true
        default: 'plan'
        type: choice
        options:
        - plan
        - apply
        - destroy

env:
  AWS_DEFAULT_REGION: us-east-1
  TF_VERSION: '1.6.0'

jobs:
  terraform-check:
    name: 'Terraform Format and Validate'
    runs-on: ubuntu-latest
    
    defaults:
      run:
        shell: bash
        working-directory: ./terraform
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}
    
    - name: Terraform Format
      id: fmt
      run: terraform fmt -check -recursive
      continue-on-error: true
    
    - name: Terraform Init
      id: init
      run: terraform init
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    
    - name: Terraform Validate
      id: validate
      run: terraform validate
    
    - name: Update Pull Request
      uses: actions/github-script@v7
      if: github.event_name == 'pull_request'
      env:
        FMT: "terraform fmt\n${{ steps.fmt.outputs.stdout }}"
        INIT: "terraform init\n${{ steps.init.outputs.stdout }}"
        VALIDATE: "terraform validate\n${{ steps.validate.outputs.stdout }}"
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
          #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
          #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
          
          <details><summary>Show Output</summary>
          
          \`\`\`\n
          ${process.env.FMT}
          \`\`\`
          
          \`\`\`\n
          ${process.env.INIT}
          \`\`\`
          
          \`\`\`\n
          ${process.env.VALIDATE}
          \`\`\`
          
          </details>
          
          *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })

  terraform-plan:
    name: 'Terraform Plan'
    runs-on: ubuntu-latest
    needs: terraform-check
    if: github.event_name == 'pull_request' || (github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'plan')
    
    defaults:
      run:
        shell: bash
        working-directory: ./terraform
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}
    
    - name: Terraform Init
      run: terraform init
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    
    - name: Terraform Plan
      id: plan
      run: |
        terraform plan -var-file="terraform.tfvars" -no-color -out=tfplan
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    
    - name: Update Pull Request
      uses: actions/github-script@v7
      if: github.event_name == 'pull_request'
      env:
        PLAN: "terraform plan\n${{ steps.plan.outputs.stdout }}"
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const output = `#### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
          
          <details><summary>Show Plan</summary>
          
          \`\`\`terraform\n
          ${process.env.PLAN}
          \`\`\`
          
          </details>
          
          *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })
    
    - name: Save Plan
      uses: actions/upload-artifact@v4
      with:
        name: tfplan
        path: ./terraform/tfplan
        retention-days: 5

  terraform-apply:
    name: 'Terraform Apply'
    runs-on: ubuntu-latest
    needs: terraform-check
    if: |
      (github.ref == 'refs/heads/main' && github.event_name == 'push') ||
      (github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'apply')
    environment: 
      name: production
      url: ${{ steps.terraform-output.outputs.application_url }}
    
    defaults:
      run:
        shell: bash
        working-directory: ./terraform
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}
        terraform_wrapper: false
    
    - name: Terraform Init
      run: terraform init
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    
    - name: Terraform Apply
      id: apply
      run: |
        terraform apply -var-file="terraform.tfvars" -auto-approve
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    
    - name: Terraform Output
      id: terraform-output
      run: |
        echo "instance_ip=$(terraform output -raw instance_public_ip)" >> $GITHUB_OUTPUT
        echo "application_url=$(terraform output -raw application_url_http)" >> $GITHUB_OUTPUT
        echo "ssh_command=$(terraform output -raw ssh_connection_command)" >> $GITHUB_OUTPUT
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    
    - name: Save Terraform State
      uses: actions/upload-artifact@v4
      with:
        name: terraform-state
        path: ./terraform/terraform.tfstate
        retention-days: 30
    
    - name: Save Private Key
      uses: actions/upload-artifact@v4
      with:
        name: ssh-private-key
        path: ./terraform/techeazy-devops-key.pem
        retention-days: 30
    
    - name: Create Deployment Summary
      run: |
        echo "## üöÄ Deployment Successful!" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### üìä Deployment Details" >> $GITHUB_STEP_SUMMARY
        echo "- **Instance IP:** ${{ steps.terraform-output.outputs.instance_ip }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Application URL:** ${{ steps.terraform-output.outputs.application_url }}" >> $GITHUB_STEP_SUMMARY
        echo "- **SSH Command:** \`${{ steps.terraform-output.outputs.ssh_command }}\`" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### üîó Quick Links" >> $GITHUB_STEP_SUMMARY
        echo "- [Access Application](${{ steps.terraform-output.outputs.application_url }})" >> $GITHUB_STEP_SUMMARY
        echo "- [AWS EC2 Console](https://us-east-1.console.aws.amazon.com/ec2/home?region=us-east-1#Instances:)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### üìã Next Steps" >> $GITHUB_STEP_SUMMARY
        echo "1. Wait 2-3 minutes for application to fully start" >> $GITHUB_STEP_SUMMARY
        echo "2. Test the application endpoint" >> $GITHUB_STEP_SUMMARY
        echo "3. Monitor application logs if needed" >> $GITHUB_STEP_SUMMARY

  terraform-destroy:
  name: 'Terraform Destroy'
  runs-on: ubuntu-latest
  if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'destroy'
  environment: 
    name: production
  
  defaults:
    run:
      shell: bash
      working-directory: ./terraform
  
  steps:
  - name: Checkout
    uses: actions/checkout@v4

  - name: Setup Terraform
    uses: hashicorp/setup-terraform@v3
    with:
      terraform_version: ${{ env.TF_VERSION }}
  
  # Download the previous Terraform state artifact
  - name: Download Terraform State
    uses: actions/download-artifact@v4
    with:
      name: terraform-state
      path: ./terraform

  - name: Terraform Init
    run: terraform init
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  
  - name: Terraform Destroy
    run: terraform destroy -var-file="terraform.tfvars" -auto-approve
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  
  - name: Create Destruction Summary
    run: |
      echo "## üóëÔ∏è Infrastructure Destroyed!" >> $GITHUB_STEP_SUMMARY
      echo "" >> $GITHUB_STEP_SUMMARY
      echo "All AWS resources have been successfully destroyed." >> $GITHUB_STEP_SUMMARY
      echo "" >> $GITHUB_STEP_SUMMARY
      echo "### üßπ Cleanup Complete" >> $GITHUB_STEP_SUMMARY
      echo "- EC2 Instance: Terminated" >> $GITHUB_STEP_SUMMARY
      echo "- VPC and associated resources: Deleted" >> $GITHUB_STEP_SUMMARY
      echo "- Security Groups: Removed" >> $GITHUB_STEP_SUMMARY
      echo "- Key Pair: Deleted" >> $GITHUB_STEP_SUMMARY

    
    - name: Create Destruction Summary
      run: |
        echo "## üóëÔ∏è Infrastructure Destroyed!" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "All AWS resources have been successfully destroyed." >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### üßπ Cleanup Complete" >> $GITHUB_STEP_SUMMARY
        echo "- EC2 Instance: Terminated" >> $GITHUB_STEP_SUMMARY
        echo "- VPC and associated resources: Deleted" >> $GITHUB_STEP_SUMMARY
        echo "- Security Groups: Removed" >> $GITHUB_STEP_SUMMARY
        echo "- Key Pair: Deleted" >> $GITHUB_STEP_SUMMARY
